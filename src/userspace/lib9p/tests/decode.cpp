#include <stdint.h>
#include <vector>
#include <stdexcept>
#include <string>

#include <gtest/gtest.h>

#include <9p/message>

#define testdata(n, ...) \
    std::istringstream n(std::string({ __VA_ARGS__ })); \
    n.exceptions(std::istream::failbit | std::istream::eofbit | std::istream::badbit);

TEST(DecodeMessage, TooShort) {
    // "255 bytes lol"
    testdata(data1, 0xff, 0, 0, 0);
    EXPECT_ANY_THROW(lib9p::Message::decode(data1));

    // "255 bytes lol" but enough to decode a message
    testdata(data2, 0xff, 0,0,0, 0x64, 0,0);
    EXPECT_ANY_THROW(lib9p::Message::decode(data2));

    // version field cut off
    testdata(data3, 14, 0,0,0, 0x64, 0,0,0, 0x20, 0,0, 6, 0, 0x39);
    EXPECT_ANY_THROW(lib9p::Message::decode(data3));

    // version string length cut off
    testdata(data4, 11, 0,0,0, 0x64, 0,0,0, 0x20, 0,0,0);
    EXPECT_ANY_THROW(lib9p::Message::decode(data4));
}

TEST(DecodeMessage, Tversion) {
    // message as generated by 9mount. 8K max message size, 9P2000 version
    testdata(data,
        0x64,
        0xff, 0xff,
        0, 0x20, 0, 0,
        0x06, 0, 0x39, 0x50, 0x32, 0x30, 0x30, 0x30
    );

    lib9p::Message* msg = lib9p::Message::decode(data);
    lib9p::Tversion* version = dynamic_cast<lib9p::Tversion*>(msg);

    ASSERT_NE(nullptr, version);
    EXPECT_EQ(lib9p::Message::NoTag, msg->getTag());
    EXPECT_EQ(8192, version->getMsize());
    EXPECT_EQ("9P2000", version->getVersion());
}

TEST(DecodeMessage, Tversion_NoVersion) {
    // message as generated by 9mount. 8K max message size, 9P2000 version
    // modified: no version string, probably not valid 9p, but valid message encoding
    testdata(data,
        0x64,
        0xff, 0xff,
        0, 0x20, 0, 0,
        0, 0
    );

    lib9p::Message* msg = lib9p::Message::decode(data);
    lib9p::Tversion* version = dynamic_cast<lib9p::Tversion*>(msg);

    ASSERT_NE(nullptr, version);
    EXPECT_EQ(lib9p::Message::NoTag, msg->getTag());
    EXPECT_EQ(8192, version->getMsize());
    EXPECT_EQ("", version->getVersion());
}

TEST(DecodeMessage, Tversion_GarbageIgnored) {
    // message as generated by 9mount. 8K max message size, 9P2000 version
    // modified: garbage added
    testdata(data,
        0x64,
        0xff, 0xff,
        0, 0x20, 0, 0,
        0x06, 0, 0x39, 0x50, 0x32, 0x30, 0x30, 0x30,

        42, 23, 13, 37
    );

    lib9p::Message* msg = lib9p::Message::decode(data);
    lib9p::Tversion* version = dynamic_cast<lib9p::Tversion*>(msg);

    ASSERT_NE(nullptr, version);
    EXPECT_EQ(lib9p::Message::NoTag, msg->getTag());
    EXPECT_EQ(8192, version->getMsize());
    EXPECT_EQ("9P2000", version->getVersion());
}
