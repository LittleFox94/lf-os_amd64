groups:
- number: 0
  name:  scheduler
  desc:  Syscalls changing the scheduling of the calling process.
  syscalls:
  - number: 0
    name:  exit
    desc:  Exit the process, free all memory and deliver exit code to parent process. This syscall will never return.
    parameters:
    - name: exit_code
      desc: Code returned from the calling process to the parent process
      type: uint8_t
      reg:  rax

  - number: 1
    name:   clone
    desc:   Clone the process into a new process while optionally sharing all memory (which is commonly called a thread then).
    parameters:
    - name: share_memory
      desc: Share memory with original process
      type: bool
      reg:  rax
    - name: entry
      desc: |
        Entrypoint of the child. Special case: NULL, will continue at the same code location (only valid if share_memory == 1)
      type: void*
      reg:  rdi
    returns:
    - name: pid
      desc: PID of the new process in the old process, 0 in the new process, -1 denotes an error
      type: pid_t
      reg:  rax

  - number: 2
    name:  sleep
    desc:  Sleep for the given time or yield CPU time to another process, if given time is 0
    parameters:
    - name: nanoseconds
      desc: Nanoseconds until first normally scheduling the process again
      type: uint64_t
      reg:  rax

  - number: 3
    name:  get_pid
    desc:  Return own or parent PID
    parameters:
    - name: parent
      desc: If true, returns parent PID. Own PID otherwise
      type: bool
      reg:  rax
    returns:
    - name: pid
      desc: Own or parent PID
      type: pid_t
      reg:  rax

  - number: 4
    name: exec_prepare
    desc: Prepare an exec() call by creating a new virtual memory map
    returns:
    - name: error
      desc: 0 if success, errno otherwise
      type: uint64_t
      reg:  rax

  - number: 5
    name: exec_prepare_map
    desc: Prepare an exec() call by mapping current heap into new memory map
    parameters:
    - name: current
      type: void*
      desc: Address in current process heap
      reg:  rsi
    - name: dest
      type: void*
      desc: Destination address in new process' space
      reg:  rdi
    - name: length
      desc: Number of bytes to map, page size chosen by kernel
      reg:  rax
      type: uint32_t
    - name: access
      desc: Access mode bit map, MEM_READ = 1, MEM_WRITE = 2, MEM_EXEC = 4
      type: uint8_t
      reg:  rax
    returns:
    - name: error
      desc: 0 if success, errno otherwise
      type: uint64_t
      reg:  rax

  - number: 6
    name: exec
    desc: Execute a previously prepared exec (see exec_prepare and exec_prepare_map)
    returns:
    - name: error
      desc: Not at all on success, errno otherwise
      type: uint64_t
      reg:  rax

- number: 1
  name:   memory
  desc:   Syscalls affecting memory mappings for this or other processes
  syscalls:
  - number: 0
    name:   sbrk
    desc:   Increment the data segment by inc bytes and return the new end of the data segment.
    parameters:
    - name: inc
      desc: Minimum number of bytes to add the data segment
      type: int64_t
      reg:  rax
    returns:
    - name: data_end
      type: void*
      reg:  rax
      desc: Pointer to the last byte in the data segment

- number: 2
  name:   hardware
  desc:   Various syscalls to access hardware resources
  syscalls:
  - number: 0
    name:   framebuffer
    desc:   Take control of the framebuffer (if still in control by kernel)
    returns:
    - name: framebuffer
      type: uint32_t*
      reg:  rax
      desc: Pointer to the framebuffer
    - name: width
      type: uint16_t
      reg:  rdi
      desc: Width of the framebuffer
    - name: height
      type: uint16_t
      reg:  rdi
      desc: Height of the framebuffer
    - name: stride
      type: uint16_t
      reg:  rdi
      desc: Stride (number of bytes per pixel row) of the framebuffer
    - name: colorFormat
      type: uint16_t
      reg:  rdi
      desc: TBD

  - number: 1
    name: ioperm
    desc: Request access to I/O ports, this is i386 and amd64 only
    parameters:
    - name: from
      type: uint16_t
      reg:  rax
      desc: First port for which access is requested
    - name: num
      type: uint16_t
      reg:  rax
      desc: Number of ports for which access is requested
    - name: turn_on
      type: bool
      reg:  rax
      desc: Request (true) or drop (false) access to port
    returns:
    - name: error
      type: uint64_t
      reg:  rax
      desc: Error code, zero on success

  - number: 2
    name: interrupt_notify
    desc: Request to be notified of hardware interrupts or cancel notifications
    parameters:
    - name: interrupt
      type: uint8_t
      desc: Number of the interrupt to be notified for
      reg:  rax
    - name: notify
      type: bool
      desc: Add notification (true) or cancel (false)
      reg:  rax
    - name: queue
      type: uint64_t
      desc: Message queue to send notifications to
      reg:  rdi
    returns:
    - name: error
      type: uint64_t
      desc: Error code, 0 if success
      reg:  rax

- number: 3
  name:   locking
  desc:   Mutexes, Semaphores, and co
  syscalls:
  - number: 0
    name:   create_mutex
    desc:   This syscall creates a new mutex
    returns:
    - name: mutex
      desc: pthread_mutex_t value for the new mutex
      type: uint64_t
      reg:  rax
    - name: error
      desc: error code, zero if success
      type: uint64_t
      reg:  rdi
  - number: 1
    name:   destroy_mutex
    desc:   destroys the given mutex, returns an error if locked
    parameters:
    - name: mutex
      desc: mutex to destroy as pthread_mutex_t
      type: uint64_t
      reg:  rax
    returns:
    - name: error
      desc: error code, zero if success
      type: uint64_t
      reg:  rdi
  - number: 2
    name:   lock_mutex
    desc:   Waits for the mutex to be free and locks it or tries to lock it without blocking
    parameters:
    - name: mutex
      desc: mutex to lock as pthread_mutex_t
      type: uint64_t
      reg:  rax
    - name: trylock
      desc: Try to lock instead of block
      type: bool
      reg:  rdi
    returns:
    - name: error
      desc: error of this operation, zero if success
      type: uint64_t
      reg:  rax
  - number: 3
    name:   unlock_mutex
    desc:   Unlocks a mutex
    parameters:
    - name: mutex
      desc: mutex to lock as pthread_mutex_t
      type: uint64_t
      reg:  rax
    returns:
    - name: error
      desc: error of this operation, zero if success
      type: uint64_t
      reg:  rax
  - number: 4
    name:   create_condvar
    desc:   Create a new condvar processes can wait on
    returns:
    - name: condvar
      desc: pthread_cond_t value for the new condvar
      type: uint64_t
      reg:  rax
    - name: error
      desc: error code, zero if success
      type: uint64_t
      reg:  rdi
  - number: 5
    name:   destroy_condvar
    desc:   Destroys a given condvar. Errors if processes are waiting on it
    parameters:
    - name: condvar
      desc: pthread_cond_t value to destroy
      type: uint64_t
      reg:  rax
    returns:
    - name: error
      desc: error code, zero if success
      type: uint64_t
      reg:  rdi
  - number: 6
    name:   signal_condvar
    desc:   Signals a condvar to unlock up to amount processes
    parameters:
    - name: condvar
      desc: condvar to signal
      type: uint64_t
      reg:  rax
    - name: amount
      desc: maximum amount of processes to unlock
      type: uint64_t
      reg:  rdi
    returns:
    - name: error
      desc: error code, zero if success
      type: uint64_t
      reg:  rdi
  - number: 7
    name:   wait_condvar
    desc:   Makes the calling process blocking wait on the condvar
    parameters:
    - name: condvar
      desc: condvar to wait on
      type: uint64_t
      reg:  rax
    - name: timeout
      desc: Wait timeout, not yet implemented
      type: uint64_t
      reg:  rdi
    returns:
    - name: error
      desc: error code, zero if success
      type: uint64_t
      reg:  rdi

- number: 4
  name:  ipc
  desc:  Interprocess-communication
  syscalls:
  - number: 0
    name:   mq_create
    desc:   create a new message queue
    parameters:
    - name: global_read
      desc: Allow other processes to read from this queue
      type: bool
      reg:  rax
    - name: global_write
      desc: Allow other processes to write to this queue
      type: bool
      reg:  rax
    - name: message_limit
      type: size_t
      desc: Max count of messages to store in the queue
      reg:  rdi
    - name: data_limit
      type: size_t
      desc: Max amount of data to store in the queue
      reg:  rsi
    returns:
    - name: mq
      desc: Unique identifier for the new queue
      type: uint64_t
      reg:  rax
    - name: error
      desc: error code, zero if success
      type: uint64_t
      reg:  rdi

  - number: 1
    name:   mq_destroy
    desc:   Destroy a given message queue
    parameters:
    - name: mq
      type: uint64_t
      desc: ID of the message queue to destroy
      reg:  rax
    returns:
    - name: error
      desc: error code, zero if success
      type: uint64_t
      reg:  rax

  - number: 2
    name:   mq_poll
    desc:   Retrieve message from given queue
    parameters:
    - name: queue
      desc: Message queue ID, 0 is process queue
      type: uint64_t
      reg:  rax
    - name: wait
      desc: Wait for a message to be available
      type: bool
      reg:  rdi
    - name: message
      desc: Pointer where to store the message, has to be allocated with enough storage
      type: struct Message*
      reg:  rsi
    returns:
    - name: error
      desc: Error code, 0 on success
      reg:  rax
      type: uint64_t

  - number: 3
    name:   mq_send
    desc:   Send message to given queue
    parameters:
    - name: queue
      desc: Message queue ID, 0 is process queue
      type: uint64_t
      reg:  rax
    - name: process
      desc: Recipient process, to send messages to other processes process queue
      type: uint64_t
      reg:  rdi
    - name: message
      desc: Pointer to message from queue
      type: struct Message*
      reg:  rsi
    returns:
    - name: error
      desc: Error code, 0 if success
      type: uint64_t
      reg:  rax

  - number: 4
    name:   service_register
    desc:   Register as implementation of the given service
    parameters:
    - name: uuid
      desc: UUID of the service to register for
      type: const uuid_t*
      reg:  rax
    - name: queue
      desc: Message queue ID, 0 is process queue
      type: uint64_t
      reg:  rdi
    returns:
    - name: error
      desc: Error code, 0 if success
      type: uint64_t
      reg:  rax

  - number: 5
    name:   service_discover
    desc:   Send message to implementations of given service
    parameters:
    - name: uuid
      desc: UUID of the service to discover
      type: const uuid_t*
      reg:  rax
    - name: queue
      desc: Message queue ID, 0 is process queue
      type: uint64_t
      reg:  rdi
    - name: message
      desc: Message to send, UUID will be filled in automatically, has to be of type ServiceDiscover
      type: struct Message*
      reg:  rsi
    returns:
    - name: error
      desc: Error code, 0 if success
      type: uint64_t
      reg:  rax

- number: 5
  name:   clock
  desc:   Clock syscalls (time since system start, current time once a driver loaded it into the kernel, sleep, ...)
  syscalls:
  - number: 0
    name:   read
    desc:   Read nanoseconds since system start
    returns:
    - name: nanoseconds
      desc: Nanoseconds since system start (or rather, since timer initialization)
      type: uint64_t
      reg:  rax

- number: 255
  name:   debug
  desc:   Debugging syscalls (simple text output, logging, ...)
  syscalls:
  - number: 0
    name:   print
    desc:   Print a message to the screen at a location defined by the kernel
    parameters:
    - name: str
      desc: Message to print
      type: char*
      reg:  rax
