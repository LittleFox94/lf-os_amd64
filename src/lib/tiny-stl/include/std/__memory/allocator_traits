// vim: ft=cpp
#pragma once

#if !defined(_MEMORY_NAMESPACE)
#  error "Do not include this file directly!"
#endif

#include <cstddef>
#include <new>

namespace _MEMORY_NAMESPACE {
    template<class Alloc>
    struct allocator_traits {
        using pointer = Alloc::value_type*;

        template<class T>
        using rebind_alloc = typename Alloc::template rebind<T>::other;

        template<class T, class... Args>
        static void construct(Alloc& a, T* p, Args&&... args) {
            a.construct(p, args...);
        }

        static void destroy(Alloc& a, pointer p) {
            a.destroy(p);
        }

        static pointer allocate(Alloc& a, std::size_t n) {
            return a.allocate(n);
        }

        static void deallocate(Alloc& a, pointer p, std::size_t n) {
            a.deallocate(p, n);
        }
    };
};
