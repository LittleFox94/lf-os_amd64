// vim: ft=cpp
#pragma once

#if !defined(_MEMORY_NAMESPACE)
#  error "Do not include this file directly!"
#endif

#include <cstddef>
#include <new>

#include <tinystl/ref_count>

namespace _MEMORY_NAMESPACE {
    template<class T>
    class shared_ptr {
        public:
            template<typename U> friend class shared_ptr;

            using element_type = T;

            template<class Y>
            shared_ptr(Y* ptr) noexcept :
                _ptr(ptr), _control_block(new tinystl::typed_ref_count_control_block<T>(ptr)) {
                _control_block->inc_shared();
            }

            template<class Y>
            shared_ptr(shared_ptr<Y>& r, element_type* p) noexcept :
                _ptr(p), _control_block(r._control_block) {
                _control_block->inc_shared();
            }

            shared_ptr(const shared_ptr& r) noexcept :
                _ptr(r._ptr), _control_block(r._control_block) {
                _control_block->inc_shared();
            }

            ~shared_ptr() {
                _control_block->dec_shared();
            }

            T& operator*() const noexcept {
                return *_ptr;
            }

            T* operator->() const noexcept {
                return _ptr;
            }

            T* get() const noexcept {
                return _ptr;
            }

            long use_count() const noexcept {
                return _control_block->_shared_reference_count;
            }

        private:
            T* _ptr;
            tinystl::ref_count_control_block* _control_block;
    };

    template<class T, class... Args>
    shared_ptr<T> make_shared(Args&&... args) {
        T* obj = new T(args...);
        return shared_ptr<T>(obj);
    }

    template<class T, class U>
    std::shared_ptr<T> static_pointer_cast(std::shared_ptr<U>& r) noexcept {
        auto p = static_cast<typename std::shared_ptr<T>::element_type*>(r.get());
        return std::shared_ptr<T>(r, p);
    }

};
