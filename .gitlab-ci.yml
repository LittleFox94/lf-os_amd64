stages:
- pre-prepare
- prepare
- test
- build
- deploy

llvm:
  stage: pre-prepare
  trigger:
    project:  littlefox/llvm-project
    branch:   lf-os
    strategy: depend
  only:
    changes:
    - .gitlab/llvm-ci.yml

.docker-build: &docker-build
  image:
    name: gcr.io/kaniko-project/executor:debug-edge
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - >-
        /kaniko/executor
        --context     $CI_PROJECT_DIR
        --dockerfile  $CI_PROJECT_DIR/$DOCKERFILE
        --destination $IMAGE_NAME:$IMAGE_TAG
        --destination $IMAGE_NAME/$CI_COMMIT_REF_NAME:latest
        --cache=true
        --cache-repo $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME/kaniko-cache
  only:
  - branches

ci-image-llvm:
  <<: *docker-build
  stage: prepare
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/ci/llvm
    IMAGE_TAG:  $CI_COMMIT_SHA
    DOCKERFILE: Dockerfile.llvm-ci
  only:
    changes:
    - Dockerfile.llvm-ci

ci-image:
  <<: *docker-build
  stage: prepare
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/ci
    IMAGE_TAG:  $CI_COMMIT_SHA
    DOCKERFILE: Dockerfile.ci

test:
  stage: test
  needs:
  - ci-image
  image: $CI_REGISTRY_IMAGE/ci:$CI_COMMIT_SHA
  variables:
    CTEST_OUTPUT_ON_FAILURE: "1"
    GIT_STRATEGY: fetch
  script:
  - cmake -DCMAKE_BUILD_TYPE=Release -G Ninja -B build -S .
  - ninja -C build test-kernel
  only:
    changes:
    - src/**/*
    - cmake/**/*
    - CMakeLists.txt
    - .gitlab-ci.yml

build:
  stage: build
  needs:
  - ci-image
  image: $CI_REGISTRY_IMAGE/ci:$CI_COMMIT_SHA
  interruptible: true
  before_script:
  - '[ -z "$CCACHE_DIR" ] && export CCACHE_DIR=$(pwd)/.ccache'
  script:
  - cmake -G Ninja -DCPACK_PACKAGE_VERSION=0.1.1-${CI_PIPELINE_IID} -DCMAKE_BUILD_TYPE=Release -B build -S .
  - ninja -C build -j$(nproc) hd.img.xz package
  - mv build/hd.img.xz build/*.deb .
  variables:
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: recursive
    ARTIFACT_COMPRESSION_LEVEL: fastest
  artifacts:
    paths:
    - hd.img.xz
    - "*.deb"
  cache:
    paths:
    - .ccache
  only:
    changes:
    - src/**/*
    - cmake/**/*
    - CMakeLists.txt
    - .gitlab-ci.yml

deploy-apt:
  stage: deploy
  image: alpine
  variables:
    GIT_STRATEGY: none
  before_script:
  - apk add -u --no-cache curl
  script:
  - |
    for package in *.deb; do
      curl -X PUT --data-binary @$package -f        \
      -H 'Content-Type: application/octet-stream'   \
      -H 'x-component: lf-os'                       \
      -H 'x-suites: unstable'                        \
      -H "Authorization: Bearer $APT_DEPLOY_TOKEN"  \
      https://fission.svc.0x0a.network/apt/upload
    done
  only:
    refs:
    - master
    changes:
    - src/**/*
    - cmake/**/*
    - CMakeLists.txt
    - .gitlab-ci.yml
  needs:
  - ci-image
  - build

pages:
  stage: deploy
  needs:
  - ci-image
  image: $CI_REGISTRY_IMAGE/ci:$CI_COMMIT_SHA
  variables:
    GIT_STRATEGY: fetch
    ARTIFACT_COMPRESSION_LEVEL: fastest
  script:
  - cmake -DCMAKE_BUILD_TYPE=Release -G Ninja -B build -S .
  - ninja -C build doc
  - mv build/doc/html public
  artifacts:
    paths:
    - public
  only:
    refs:
    - master
