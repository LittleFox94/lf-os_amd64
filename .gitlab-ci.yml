stages:
- prepare-toolchain
- build-toolchain
- deploy-toolchain
- prepare
- test
- build-sysroot
- build-system
- deploy

variables:
  VERSION:     0.1.1+${CI_PIPELINE_ID}
  MAIN_BRANCH: master


#############################
# some job templates

.toolchain-job:
  only:
    changes:
    - cmake/project_toolchain.cmake
    - CMakeLists.txt
    - .gitlab-ci.yml
    - src/llvm
    - Dockerfile.llvm-ci

.source-job:
  image: $CI_REGISTRY_IMAGE/ci/$CI_COMMIT_REF_NAME:latest
  only:
    changes:
    - src/**/*
    - cmake/**/*
    - CMakeLists.txt
    - .gitlab-ci.yml
    - Dockerfile.ci
  needs:
  - ci-image

.deploy-job:
  stage: deploy
  only:
    variables:
    - $MAIN_BRANCH == $CI_COMMIT_REF_NAME

.docker-build: &docker-build
  image:
    name: gcr.io/kaniko-project/executor:debug-edge
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - >-
        /kaniko/executor
        --context     $CI_PROJECT_DIR
        --dockerfile  $CI_PROJECT_DIR/$DOCKERFILE
        --destination $IMAGE_NAME:$IMAGE_TAG
        --destination $IMAGE_NAME/$CI_COMMIT_REF_NAME:latest
        --cache=true
        --cache-repo $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME/kaniko-cache
        $BUILD_ARGS
  only:
  - branches

.cmake-build:
  extends:
  - .source-job
  image: $CI_REGISTRY_IMAGE/ci/$CI_COMMIT_REF_NAME:latest
  interruptible: true
  before_script: &cmake-build-before-script
  - '[ -z "$CCACHE_DIR" ] && export CCACHE_DIR=$(pwd)/.ccache'
  script: &cmake-build-script
  - cmake -Dsubproject=$SUBPROJECT $CMAKE_DEFINES -G Ninja -DCPACK_PACKAGE_VERSION=$VERSION -DCMAKE_BUILD_TYPE=Release -B build -S .
  - ninja -C build ${TARGETS:-package}
  - test "$CMAKE_NO_COPY" || mv build/*.deb build/*.tar.xz .
  variables:
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: recursive
    ARTIFACT_COMPRESSION_LEVEL: fastest
  cache:
    paths:
    - .ccache

.apt-deploy:
  extends:
  - .deploy-job
  - .source-job
  image: alpine
  variables:
    GIT_STRATEGY: none
  before_script:
  - apk add -u --no-cache curl
  script:
  - |
    for package in *.deb; do
      curl -X PUT --data-binary @$package -f        \
      -H 'Content-Type: application/octet-stream'   \
      -H 'x-component: lf-os'                       \
      -H 'x-suites: unstable'                       \
      -H "Authorization: Bearer $APT_DEPLOY_TOKEN"  \
      https://fission.svc.0x0a.network/apt/upload
    done

.generic-deploy:
  extends:
  - .deploy-job
  - .source-job
  image: alpine
  variables:
    GIT_STRATEGY: none
  before_script:
  - apk add -u --no-cache curl
  script:
   - |
    for package in *; do
      component=$(echo ${package#lf_os-} | cut -d '_' -f 1)

      # component lf_os, but we split by _ so it's only lf here
      if [ $component = "lf" ]; then
        component="system"
      fi

      curl -f                               \
      --header "JOB-TOKEN: $CI_JOB_TOKEN"   \
      --upload-file "$package"              \
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$component/${VERSION}/$package"
    done


#############################
# then jobs for the toolchain

ci-image-llvm:
  extends:
  - .docker-build
  - .toolchain-job
  stage: prepare-toolchain
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/llvm-ci
    IMAGE_TAG:  $CI_COMMIT_SHA
    DOCKERFILE: Dockerfile.llvm-ci

llvm:
  extends:
  - .cmake-build
  - .toolchain-job
  stage: build-toolchain
  variables:
    SUBPROJECT: toolchain
  needs:
  - ci-image-llvm
  image: $CI_REGISTRY_IMAGE/llvm-ci:$CI_COMMIT_SHA
  artifacts:
    paths:
    - lf_os-toolchain_$VERSION_*.deb
    - lf_os-toolchain_$VERSION_*_*.tar.xz

llvm-deploy-apt:
  extends:
  - .apt-deploy
  - .toolchain-job
  stage: deploy-toolchain
  needs:
  - llvm

llvm-deploy-generic:
  extends:
  - .generic-deploy
  - .toolchain-job
  stage: deploy-toolchain
  needs:
  - llvm

ci-image:
  extends:
  - .docker-build
  stage: prepare
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/ci
    IMAGE_TAG:  $CI_COMMIT_SHA
    DOCKERFILE: Dockerfile.ci
  before_script:
  - test -f lf_os-toolchain_${VERSION}_amd64.deb && export BUILD_ARGS="--build-arg toolchainSource=local" || true
  needs:
  - job:      llvm
    optional: true


#############################
# now actual LF OS jobs

unittest:
  extends:
  - .source-job
  stage: test
  variables:
    CTEST_OUTPUT_ON_FAILURE: "1"
    GIT_STRATEGY: fetch
  script:
  - cmake -DCMAKE_BUILD_TYPE=Release -G Ninja -B build -S .
  - ninja -C build test-kernel

build-sysroot:
  extends: .cmake-build
  stage: build-sysroot
  variables:
    SUBPROJECT: sysroot
  artifacts:
    paths:
    - lf_os-sysroot_$VERSION_*.deb
    - lf_os-sysroot_$VERSION_*.tar.xz

build-system:
  extends: .cmake-build
  stage: build-system
  variables:
    SUBPROJECT: lf_os
    CMAKE_DEFINES: -Dlf_os_sysroot=/opt/lf_os/sysroot
    TARGETS: package hd.img.xz
  needs:
  - build-sysroot
  before_script:
  - *cmake-build-before-script
  - dpkg -i lf_os-sysroot*.deb
  script:
  - *cmake-build-script
  - mv build/hd.img.xz .
  artifacts:
    paths:
    - lf_os_$VERSION_*.deb
    - lf_os_$VERSION_*.tar.xz

apt-deploy:
  extends:
  - .apt-deploy
  needs:
  - build-sysroot
  - build-system

generic-deploy:
  extends:
  - .generic-deploy
  needs:
  - build-sysroot
  - build-system

pages:
  extends:
  - .cmake-build
  - .deploy-job
  stage: deploy
  variables:
    TARGETS: doc
    SUBPROJECT: lf_os
    CMAKE_NO_COPY: blacklivesmatter # any non-empty string
  script:
  - *cmake-build-script
  - mv build/doc/html public
  artifacts:
    paths:
    - public
